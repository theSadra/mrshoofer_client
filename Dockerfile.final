# Robust solution for Prisma and NextAuth issues
FROM node:20-alpine AS deps

# Set working directory
WORKDIR /app

# Copy package files for dependency installation
COPY package.json package-lock.json ./

# Remove postinstall script to prevent premature Prisma generation
RUN npm pkg delete scripts.postinstall

# Install dependencies
RUN npm ci --legacy-peer-deps

# Install Prisma explicitly
RUN npm install prisma @prisma/client

# Copy Prisma schema
COPY prisma ./prisma/

# FROM deps AS builder
WORKDIR /app

# Set environment variables for the build
ENV NODE_ENV=production
ENV NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w
ENV NEXTAUTH_URL=https://mrshoofer-client.liara.run
ENV ORS_API_SECRET=YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6
ENV SMSIR_API_KEY=YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6
ENV APP_BASE_URL=https://webapp.mrshoofer.ir
ENV DATABASE_URL=postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres

# Generate Prisma client
RUN npx prisma generate

# Copy the rest of the application code
COPY . .

# Create .env files for redundancy
RUN echo "NEXTAUTH_SECRET=${NEXTAUTH_SECRET}" > .env && \
    echo "NEXTAUTH_URL=${NEXTAUTH_URL}" >> .env && \
    echo "ORS_API_SECRET=${ORS_API_SECRET}" >> .env && \
    echo "SMSIR_API_KEY=${SMSIR_API_KEY}" >> .env && \
    echo "APP_BASE_URL=${APP_BASE_URL}" >> .env && \
    echo "DATABASE_URL=${DATABASE_URL}" >> .env && \
    cp .env .env.local && cp .env .env.production

# Build the application using the fast build that skips Prisma generation
RUN npm run build:fast

# Create startup script with diagnostics
RUN echo '#!/bin/sh\n\
# Set essential environment variables at runtime\n\
export NEXTAUTH_SECRET="vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w"\n\
export NEXTAUTH_URL="https://mrshoofer-client.liara.run"\n\
export ORS_API_SECRET="YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6"\n\
export SMSIR_API_KEY="YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6"\n\
export APP_BASE_URL="https://webapp.mrshoofer.ir"\n\
export DATABASE_URL="postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres"\n\
\n\
# Update environment files at runtime for maximum redundancy\n\
echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" > .env\n\
echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> .env\n\
echo "ORS_API_SECRET=$ORS_API_SECRET" >> .env\n\
echo "SMSIR_API_KEY=$SMSIR_API_KEY" >> .env\n\
echo "APP_BASE_URL=$APP_BASE_URL" >> .env\n\
echo "DATABASE_URL=$DATABASE_URL" >> .env\n\
cp .env .env.local\n\
cp .env .env.production\n\
cp .env .env.production.local\n\
\n\
# Verify environment variables are set\n\
echo "Environment variables set:"\n\
echo "- NEXTAUTH_SECRET: [set]"\n\
echo "- NEXTAUTH_URL: $NEXTAUTH_URL"\n\
echo "- Environment files created at: .env, .env.local, .env.production, .env.production.local"\n\
\n\
echo "Starting application with environment variables set"\n\
exec npm start\n\
' > start.sh

# Make startup script executable
RUN chmod +x start.sh

# Expose port
EXPOSE 3000

# Start the application using the startup script
CMD ["./start.sh"]
