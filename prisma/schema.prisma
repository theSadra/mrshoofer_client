// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = env("DATABASE_PROVIDER")
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  output          = "../node_modules/.prisma/client"
}

model Passenger {
  id          Int        @id @default(autoincrement())
  Firstname   String
  Lastname    String
  NumberPhone String     @unique
  NaCode      String?
  Trips       Trip[]
  Locations   Location[]
}

enum TripStatus {
  wating_info
  wating_location
  wating_start
  intrip
  done
  canceled
}

model Trip {
  id               Int        @id @default(autoincrement())
  TicketCode       String     @unique
  TripCode         String?
  Origin_id        Int
  Destination_id   Int
  OriginCity       String
  DestinationCity  String
  CarName          String
  ServiceName      String
  StartsAt         DateTime
  Passenger        Passenger  @relation(fields: [passengerId], references: [id])
  passengerId      Int
  Location         Location?  @relation(fields: [locationId], references: [id])
  locationId       Int?
  PassengerSmsSent Boolean
  AdminApproved    Boolean
  status           TripStatus @default(wating_info)
  SecureToken       String     @unique

  driverId Int?
  Driver   Driver? @relation(fields: [driverId], references: [id])
}

model Driver {
  id Int @id @default(autoincrement())

  Firstname   String
  Lastname    String
  CarName     String?
  PhoneNumber String
  Trip        Trip[]
}

model Location {
  id          Int       @id @default(autoincrement())
  Latitude    Float?
  Longitude   Float?
  Description String?
  TextAddress String?
  PhoneNumber String?
  Passenger   Passenger @relation(fields: [passengerId], references: [id])
  passengerId Int
  Trips       Trip[]
}

model User {
  id                 String   @id @default(cuid())
  name               String?
  email              String?  @unique
  emailVerified      DateTime?
  password           String?  // hashed password
  isAdmin            Boolean  @default(false)
  image              String?
  accounts           Account[]
  sessions           Session[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                 String   @id @default(cuid())
  sessionToken       String   @unique
  userId             String
  expires            DateTime
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier         String
  token              String   @unique
  expires            DateTime

  @@unique([identifier, token])
}
