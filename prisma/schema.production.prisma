// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
  output          = "../node_modules/.prisma/client"
}

model Passenger {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  firstName    String
  lastName     String
  phoneNumber  String    @unique
  tickets      Ticket[]
  trips        Trip[]
}

model Ticket {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  origin      String
  destination String
  pickupTime  DateTime
  price       Float
  status      String     @default("pending")
  
  passengerId String
  passenger   Passenger  @relation(fields: [passengerId], references: [id], onDelete: Cascade)
  
  tripId      String?
  trip        Trip?      @relation(fields: [tripId], references: [id])
}

model Trip {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  origin      String
  destination String
  departureTime DateTime
  status      String     @default("scheduled")
  
  driverId    String?
  Driver      Driver?    @relation(fields: [driverId], references: [id])
  
  passengerId String?
  passenger   Passenger? @relation(fields: [passengerId], references: [id])
  
  tickets     Ticket[]
  locations   Location[]
}

model Driver {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  firstName   String
  lastName    String
  PhoneNumber String   @unique
  licenseNumber String @unique
  vehicleInfo String
  isAvailable Boolean  @default(true)
  
  trips       Trip[]
}

model Location {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude  Float
  longitude Float
  address   String?
  type      String   // "pickup" or "dropoff"
  
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
