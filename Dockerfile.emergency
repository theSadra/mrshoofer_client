# EMERGENCY DOCKERFILE FOR NEXTAUTH ISSUES
# This Dockerfile is specifically designed to fix NextAuth secret issues

FROM node:20-alpine AS base

# FORCE ENVIRONMENT VARIABLES AT EVERY STAGE
ENV NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w
ENV NEXTAUTH_URL=https://mrshoofer-client.liara.run
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

# Install dependencies
FROM base AS deps
RUN apk add --no-cache libc6-compat openssl

# Copy package files
COPY package.json package-lock.json* ./

# Install dependencies
RUN npm ci --ignore-scripts --legacy-peer-deps && npm cache clean --force

# Build the application
FROM base AS builder
WORKDIR /app

# Copy all necessary files
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Create .env files with the secret
RUN echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" > .env && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> .env && \
    echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" > .env.local && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> .env.local && \
    echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" > .env.production && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> .env.production

# Generate Prisma client with production schema
RUN cp ./prisma/schema.production.prisma ./prisma/schema.prisma || true
RUN npx prisma generate --schema=./prisma/schema.prisma

# Build application
RUN npm run build:fast

# Create the emergency server wrapper
COPY emergency-server.js ./emergency-server.js

# Production image
FROM base AS runner
WORKDIR /app

# Create a non-root user
RUN addgroup --system --gid 1001 nodejs && \
    adduser --system --uid 1001 nextjs

# Install runtime dependencies
COPY package.json package-lock.json* ./
RUN npm ci --ignore-scripts --legacy-peer-deps --omit=dev && npm cache clean --force

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public
COPY --from=builder --chown=nextjs:nodejs /app/emergency-server.js ./emergency-server.js

# Copy .env files
COPY --from=builder --chown=nextjs:nodejs /app/.env ./
COPY --from=builder --chown=nextjs:nodejs /app/.env.local ./
COPY --from=builder --chown=nextjs:nodejs /app/.env.production ./

# Copy Prisma files
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=nextjs:nodejs /app/node_modules/@prisma ./node_modules/@prisma

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set environment variables for Next.js
ENV PORT=3000
ENV HOSTNAME=0.0.0.0

# Use our emergency server instead of the standard one
CMD ["node", "emergency-server.js"]
