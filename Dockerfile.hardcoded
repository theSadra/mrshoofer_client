# Simplest possible Dockerfile with hardcoded auth
FROM node:20-alpine

# Set critical environment variables
ENV NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w
ENV NEXTAUTH_URL=https://mrshoofer-client.liara.run

WORKDIR /app

# Copy everything at once
COPY . .

# Create all possible .env files
RUN echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" > .env && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> .env && \
    cp .env .env.local && cp .env .env.production && cp .env .env.production.local

# Directly modify the NextAuth route file to hardcode the secret
RUN sed -i 's/const SECRET = process.env.NEXTAUTH_SECRET || "vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w";/const SECRET = "vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w"; process.env.NEXTAUTH_SECRET = SECRET;/' app/api/auth/\[...nextauth\]/route.ts

# Remove postinstall script
RUN sed -i '/postinstall/d' package.json

# Install and build in one step
RUN npm install && npx prisma generate && npm run build

# Create startup script with hardcoded values
RUN echo '#!/bin/sh\n\
export NEXTAUTH_SECRET="vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w"\n\
export NEXTAUTH_URL="https://mrshoofer-client.liara.run"\n\
\n\
# Log environment variables\n\
echo "Starting with environment variables:"\n\
echo "NEXTAUTH_SECRET: [hardcoded]"\n\
echo "NEXTAUTH_URL: $NEXTAUTH_URL"\n\
\n\
exec npm start\n\
' > start.sh

# Make executable
RUN chmod +x start.sh

# Expose port
EXPOSE 3000

# Use startup script
CMD ["./start.sh"]
