# Dockerfile with enhanced environment variable handling
FROM node:20-alpine

# Set working directory
WORKDIR /app

# Set environment variables at build time
ENV NODE_ENV=production
ENV NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w
ENV NEXTAUTH_URL=https://mrshoofer-client.liara.run
ENV ORS_API_SECRET=YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6
ENV SMSIR_API_KEY=YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6
ENV APP_BASE_URL=https://webapp.mrshoofer.ir
ENV DATABASE_URL=postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres

# Create .env files FIRST to ensure they exist throughout the build process
RUN mkdir -p /app
RUN echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" > /app/.env && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> /app/.env && \
    echo "ORS_API_SECRET=YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6" >> /app/.env && \
    echo "SMSIR_API_KEY=YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6" >> /app/.env && \
    echo "APP_BASE_URL=https://webapp.mrshoofer.ir" >> /app/.env && \
    echo "DATABASE_URL=postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres" >> /app/.env && \
    cp /app/.env /app/.env.local && \
    cp /app/.env /app/.env.production

# Also write to /etc/environment for system-wide env vars
RUN echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" >> /etc/environment && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> /etc/environment

# Copy package files first
COPY package.json package-lock.json ./

# Remove postinstall script to prevent premature Prisma generation
RUN sed -i '/postinstall/d' package.json

# Install dependencies
RUN npm install

# Copy the rest of the application
COPY . .

# Generate Prisma client after all dependencies are installed
RUN npx prisma generate

# Create a special version of the NextAuth config that forces secrets
RUN mkdir -p /app/override-files
RUN echo 'import NextAuth from "next-auth";\n\
import CredentialsProvider from "next-auth/providers/credentials";\n\
import { PrismaAdapter } from "@next-auth/prisma-adapter";\n\
import prisma from "@/lib/prisma";\n\
\n\
// IMPORTANT: Force environment variables to be available\n\
// This is critical to fix the "NO_SECRET" error\n\
const NEXTAUTH_SECRET = "vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w";\n\
process.env.NEXTAUTH_SECRET = NEXTAUTH_SECRET;\n\
process.env.NEXTAUTH_URL = process.env.NEXTAUTH_URL || "https://mrshoofer-client.liara.run";\n\
\n\
console.log("🔐 NextAuth Environment Check:");\n\
console.log("NEXTAUTH_SECRET:", NEXTAUTH_SECRET ? "SET (hardcoded)" : "NOT SET");\n\
console.log("NEXTAUTH_URL:", process.env.NEXTAUTH_URL);\n\
\n\
export const authOptions = {\n\
  adapter: PrismaAdapter(prisma),\n\
  secret: NEXTAUTH_SECRET,\n\
  providers: [' > /app/override-files/nextauth-route.ts

# Copy existing route.ts content after our forced environment vars
RUN grep -A 1000 "providers: \[" /app/app/api/auth/\[...nextauth\]/route.ts >> /app/override-files/nextauth-route.ts

# Replace the original file with our enhanced version
RUN cp /app/override-files/nextauth-route.ts /app/app/api/auth/\[...nextauth\]/route.ts

# Build the application
RUN npm run build:fast

# Create a robust startup script to ensure environment variables are set at runtime
RUN echo '#!/bin/sh\n\
\n\
# Force environment variables at runtime (belt and suspenders approach)\n\
export NEXTAUTH_SECRET="vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w"\n\
export NEXTAUTH_URL="https://mrshoofer-client.liara.run"\n\
export ORS_API_SECRET="YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6"\n\
export SMSIR_API_KEY="YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6"\n\
export APP_BASE_URL="https://webapp.mrshoofer.ir"\n\
export DATABASE_URL="postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres"\n\
\n\
# Update .env files again at runtime for absolute certainty\n\
echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" > .env\n\
echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> .env\n\
echo "ORS_API_SECRET=$ORS_API_SECRET" >> .env\n\
echo "SMSIR_API_KEY=$SMSIR_API_KEY" >> .env\n\
echo "APP_BASE_URL=$APP_BASE_URL" >> .env\n\
echo "DATABASE_URL=$DATABASE_URL" >> .env\n\
\n\
# Copy to all possible env file locations\n\
cp .env .env.local\n\
cp .env .env.production\n\
cp .env .env.production.local\n\
\n\
# Also write to /etc/environment again\n\
echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" >> /etc/environment\n\
echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> /etc/environment\n\
\n\
# Verify environment variables\n\
echo "Environment variables set for the current session:"\n\
echo "NEXTAUTH_SECRET: [set]"\n\
echo "NEXTAUTH_URL: $NEXTAUTH_URL"\n\
echo ".env files created at: .env, .env.local, .env.production, .env.production.local"\n\
\n\
# Write the secrets to a file that we can source later if needed\n\
echo "export NEXTAUTH_SECRET=\"$NEXTAUTH_SECRET\"" > /app/env.sh\n\
echo "export NEXTAUTH_URL=\"$NEXTAUTH_URL\"" >> /app/env.sh\n\
echo "export ORS_API_SECRET=\"$ORS_API_SECRET\"" >> /app/env.sh\n\
echo "export SMSIR_API_KEY=\"$SMSIR_API_KEY\"" >> /app/env.sh\n\
echo "export APP_BASE_URL=\"$APP_BASE_URL\"" >> /app/env.sh\n\
echo "export DATABASE_URL=\"$DATABASE_URL\"" >> /app/env.sh\n\
\n\
# Make it executable\n\
chmod +x /app/env.sh\n\
\n\
echo "Starting application with environment variables set"\n\
exec npm start\n\
' > start.sh

# Make the startup script executable
RUN chmod +x start.sh

# Expose port
EXPOSE 3000

# Start the application using the startup script
CMD ["./start.sh"]
