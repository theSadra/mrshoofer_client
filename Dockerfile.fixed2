# Simple Docker# First, copy only package files and modify them to remove postinstall script
COPY package.json package-lock.json ./

# Temporarily remove the postinstall script before installing
RUN npm pkg delete scripts.postinstall

# Install dependencies including Prisma
RUN npm ci --legacy-peer-deps

# Install Prisma globally to ensure CLI is available
RUN npm install -g prisma

# Copy prisma schema files
COPY prisma ./prisma/

# Generate Prisma client explicitly
RUN npx prisma generatevironment variables directly injected
FROM node:20-alpine

# Set environment variables directly in the Dockerfile
ENV NODE_ENV=production
ENV NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w
ENV NEXTAUTH_URL=https://mrshoofer-client.liara.run
ENV ORS_API_SECRET=YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6
ENV SMSIR_API_KEY=YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6
ENV APP_BASE_URL=https://webapp.mrshoofer.ir
ENV DATABASE_URL=postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres
ENV NEXT_TELEMETRY_DISABLED=1

WORKDIR /app

# First, copy only package files and modify them to remove postinstall script
COPY package.json package-lock.json ./

# Temporarily remove the postinstall script before installing
RUN npm pkg delete scripts.postinstall

# Install dependencies 
RUN npm ci --legacy-peer-deps

# Copy application code
COPY prisma ./prisma/

# Generate Prisma client explicitly before copying the rest of the code
RUN npx prisma generate

# Copy the rest of the application code
COPY . .

# Create .env files with environment variables
RUN echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" > .env && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> .env && \
    echo "ORS_API_SECRET=YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6" >> .env && \
    echo "SMSIR_API_KEY=YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6" >> .env && \
    echo "APP_BASE_URL=https://webapp.mrshoofer.ir" >> .env && \
    echo "DATABASE_URL=postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres" >> .env

# Copy to other env files
RUN cp .env .env.local && cp .env .env.production && cp .env .env.production.local

# Build the application - skip prisma generate since we already did it
RUN npm run build:fast

# Create startup script that ensures environment variables are set
RUN echo '#!/bin/sh\n\
# Force environment variables at runtime\n\
export NEXTAUTH_SECRET="vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w"\n\
export NEXTAUTH_URL="https://mrshoofer-client.liara.run"\n\
export ORS_API_SECRET="YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6"\n\
export SMSIR_API_KEY="YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6"\n\
export APP_BASE_URL="https://webapp.mrshoofer.ir"\n\
export DATABASE_URL="postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres"\n\
\n\
# Verify environment variables are set correctly\n\
echo "Verifying environment variables..."\n\
echo "NEXTAUTH_SECRET: [set]"\n\
echo "NEXTAUTH_URL: $NEXTAUTH_URL"\n\
\n\
# Update .env files again at runtime for absolute certainty\n\
echo "NEXTAUTH_SECRET=$NEXTAUTH_SECRET" > .env\n\
echo "NEXTAUTH_URL=$NEXTAUTH_URL" >> .env\n\
echo "ORS_API_SECRET=$ORS_API_SECRET" >> .env\n\
echo "SMSIR_API_KEY=$SMSIR_API_KEY" >> .env\n\
echo "APP_BASE_URL=$APP_BASE_URL" >> .env\n\
echo "DATABASE_URL=$DATABASE_URL" >> .env\n\
cp .env .env.local\n\
cp .env .env.production\n\
cp .env .env.production.local\n\
\n\
echo "Starting application with environment variables set"\n\
exec npm start\n\
' > start.sh

# Make the startup script executable
RUN chmod +x start.sh

# Expose port
EXPOSE 3000

# Start the application using the startup script
CMD ["./start.sh"]
