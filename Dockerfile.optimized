# Ultra-optimized Dockerfile for Liara - Prisma build fixes
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat openssl
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Install all dependencies including dev dependencies for Prisma CLI
RUN npm ci --ignore-scripts --legacy-peer-deps && \
    npm cache clean --force

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app

# Accept build arguments
ARG NODE_ENV=production
ARG NEXTAUTH_SECRET
ARG NEXTAUTH_URL
ARG ORS_API_SECRET
ARG SMSIR_API_KEY
ARG APP_BASE_URL
ARG DATABASE_URL

COPY --from=deps /app/node_modules ./node_modules
COPY package*.json ./
COPY prisma ./prisma

# Copy source code (excluding node_modules and build artifacts)
COPY app ./app
COPY components ./components
COPY config ./config
COPY lib ./lib
COPY public ./public
COPY styles ./styles
COPY types ./types
COPY *.config.* ./
COPY *.json ./
COPY *.js ./
COPY *.ts ./
COPY start.sh ./start.sh

# Set production environment
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV SKIP_ENV_VALIDATION=1

# Set NextAuth environment variables from build args
ENV NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
ENV NEXTAUTH_URL=${NEXTAUTH_URL}
ENV ORS_API_SECRET=${ORS_API_SECRET}
ENV SMSIR_API_KEY=${SMSIR_API_KEY}
ENV APP_BASE_URL=${APP_BASE_URL}
ENV DATABASE_URL=${DATABASE_URL}

# Generate Prisma client with production schema
RUN cp ./prisma/schema.production.prisma ./prisma/schema.prisma
RUN npx prisma generate --schema=./prisma/schema.prisma

# Build application with optimizations
RUN npm run build:fast

# Production image, copy all the files and run next
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Accept build arguments for runtime
ARG NEXTAUTH_SECRET
ARG NEXTAUTH_URL
ARG ORS_API_SECRET
ARG SMSIR_API_KEY
ARG APP_BASE_URL
ARG DATABASE_URL

# Set NextAuth environment variables
ENV NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
ENV NEXTAUTH_URL=${NEXTAUTH_URL}
ENV ORS_API_SECRET=${ORS_API_SECRET}
ENV SMSIR_API_KEY=${SMSIR_API_KEY}
ENV APP_BASE_URL=${APP_BASE_URL}
ENV DATABASE_URL=${DATABASE_URL}

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Install dependencies including Prisma CLI for migrations
COPY package.json package-lock.json* ./
RUN npm ci --ignore-scripts --legacy-peer-deps && npm cache clean --force

# Copy the standalone build
COPY --from=builder /app/.next/standalone ./
COPY --from=builder /app/.next/static ./.next/static
COPY --from=builder /app/public ./public

# Create .env.production file with hardcoded values for Next.js
RUN echo "NEXTAUTH_SECRET=vK8mN2pQ7rS9tU6wX3yZ5aB8cE1fH4iL7oP0qR3sT6uV9xA2bD5gJ8kM1nQ4rU7w" > .env.production && \
    echo "NEXTAUTH_URL=https://mrshoofer-client.liara.run" >> .env.production && \
    echo "ORS_API_SECRET=YJure760oRHOgR0YAGOOGO1233211yMMB9R0my7cLtNOlscPgMLazgZCQhVy6" >> .env.production && \
    echo "SMSIR_API_KEY=YJure760oRHOgR01yMMB9R0my7cLtNOlscPgMLazgZCQhVy6" >> .env.production && \
    echo "APP_BASE_URL=https://webapp.mrshoofer.ir" >> .env.production && \
    echo "DATABASE_URL=postgresql://root:X7pGrkczSStKTxuyw1dH9WxE@mrshoofer-client-db:5432/postgres" >> .env.production

# Copy Prisma files for runtime
COPY --from=builder /app/prisma ./prisma
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/node_modules/@prisma ./node_modules/@prisma

# Copy startup script
COPY --from=builder --chown=nextjs:nodejs /app/start.sh ./start.sh

# Make startup script executable
RUN chmod +x ./start.sh

USER nextjs

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

CMD ["./start.sh"]
